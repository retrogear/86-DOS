; Disassembly of 86-DOS release version 0.34 for SCP assembler
; from original 8" floppy serial# 221 for Cromemco controller.
; Last edit 7-11-24 with changes for IBM PC. See ## in comments
; See notes near the end about stack space.
; 86DOS.SYS length limit = 1800H because of 20 sector boot loader.

; uses 16 byte directory entries:
; 0.34 12/29/80 General release, updating all past customers
; 0.42 02/25/81 32-byte directory entries added (not in this version)

LF	EQU	0AH
CR	EQU	0DH
ESCCH	EQU	1BH	;escape character
CANCEL	EQU	18H	;cancel with ctrl-X
MAXDIF	EQU	0FFFH
MAXCALL	EQU	36
MAXCOM	EQU	41


; Field definition for FCBs

FNAME	EQU	0	;Drive code and name
EXTENT	EQU	12
ENTPOS	EQU	16	;Position of entry in directory
DRVBP	EQU	18	;BP for SEARCH FIRST and SEARCH NEXT
FIRCLUS	EQU	20	;First cluster of file
LSTCLUS	EQU	22	;Last cluster accessed
FILSIZ	EQU	24	;Size of file in records
CLUSPOS	EQU	26	;Position of last cluster accessed
FLSFLG	EQU	28	;Flush flag
SIZCHG	EQU	29	;Size change flag
NR	EQU	32	;Next record
RR	EQU	33	;Random record

; Description of 16-byte directory entry (same as returned by SEARCH FIRST
; and SEARCH NEXT, functions 17 and 18).
;
; Location	bytes	Description
;
;    0		11	File name and extension ( 0E5H if empty)
;   11		 2	First allocation unit ( < 4080 )
;   13		 3	File size, in bytes (LSB first, 24 bits max.)
;
; The File Allocation Table uses a 12-bit entry for each allocation unit on
; the disk. These entries are packed, two for every three bytes. The contents
; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
; to the base address of the Allocation Table; 3) fetching the 16-bit word at
; this address; 4) If N was odd (so that N*1.5 was not an integer), shift the
; word right four bits; 5) mask to 12 bits (AND with 0FFF hex). Entry number
; zero is used as an end-of-file trap in the OS. Entry 1 is reserved for
; future use. The first available allocation unit is assigned entry number
; two, and even though it is the first, is called cluster 2. Entries of 0FFFH
; are end of file marks; entries of zero are unallocated. Otherwise, the
; contents of a FAT entry is the number of the next cluster in the file.

; Field definition for Drive Parameter Block

DEVNUM	EQU	0	;I/O driver number
SECSIZ	EQU	1	;Size of physical sector in records
CLUSMSK	EQU	2	;Records/cluster - 1
CLUSSHFT EQU	3	;Log2 of records/cluster
FIRFAT	EQU	4	;Starting record of FATs
FATSIZ	EQU	6	;Number of records occupied by FAT
FATCNT	EQU	7	;Number of FATs for this drive
FIRDIR	EQU	8	;Starting record of directory
DIRSIZ	EQU	10	;Number of records occupied by directory
FIRREC	EQU	11	;First record of first cluster
MAXCLUS	EQU	13	;Number of clusters on drive + 1
DIRTY	EQU	15	;Whether FAT is dirty
FAT	EQU	16	;Pointer to start of FAT

DPBSIZ	EQU	18	;Size of the structure in bytes

; BIOS entry point definitions

BIOSSEG		EQU	0060H		; ## for IBM PC

		ORG	0

BIOSINIT        EQU	0       ;Reserve room for jump to init code
BIOSSTAT	EQU	3       ;Console input status check
BIOSIN		EQU	6       ;Get console character
BIOSOUT		EQU	9       ;Output console character
BIOSPRINT	EQU	12	;Output to printer
BIOSAUXIN	EQU	15	;Get byte from auxilliary
BIOSAUXOUT	EQU	18	;Output byte to auxilliary
BIOSREAD	EQU	21	;Disk read
BIOSWRITE	EQU	24	;Disk write
BIOSDSKCHG	EQU	27	;Disk-change status

;conditions to load and execute a program:

L0000	EQU	$	;termination point. Contains INT 20H
	ORG	$+2
L0002	EQU	$	;memory size
	ORG	$+3
L0005	EQU	$	;function request entry point
	ORG	$+1
L0006	EQU	$	;segment size
	ORG	$+2
L0008	EQU	$	;reserved
	ORG	$+2
SAVEXIT	EQU	$	;terminate address

	ORG	$+76H

; INTBASE:      ABORT			INT 20H program terminate
; INTBASE+4:    COMMAND			INT 21H function request
; INTBASE+8:    BASE EXIT ADDRESS	INT 22H terminate address
; INTBASE+C:    CONTROL-C ABORT		INT 23H ctrl-c
; INTBASE+10H:  FATAL ERROR ABORT	INT 24H not mentioned
; INTBASE+14H:  BIOS DISK READ		INT 25H absolute disk read
; INTBASE+18H:  BIOS DISK WRITE		INT 26H absolute disk write
; INTBASE+40H:  Long jump to CALL entry point

INTBASE	EQU	$		;80h interrupt base set by Intel
	ORG	INTBASE+8
EXIT	EQU	$		;88h base exit address
	ORG	INTBASE+0CH
CTRLC	EQU	$		;ctrl-c interrupt
	ORG	INTBASE+40H	;C0H
ENTRYPOINT EQU	$		;long jump opcode
ENTRYPOINTSEG EQU 0CH
	ORG	$+1
ENTRYADDR EQU	$	;entry address
	ORG	$+2
ENTRYSEG EQU	$	;entry segment

	ORG	0

	JMP	DOSINIT
ESCTAB:
	DB	'SC'
	DB	'VN'
	DB	'TA'
	DB	'WB'
	DB	'UH'
	DB	'HH'
	DB	'RM'
	DB	'DD'
	DB	'P@'
	DB	'QL'
	DB	ESCCH,ESCCH		;escape character
	DB	ESCCH,ESCCH
ESCTABLEN EQU $-ESCTAB

HEADER	DB	CR,LF
	DB	'86-DOS version 0.34',CR,LF
	DB	'Copyright 1980 Seattle Computer Products',2CH,' Inc.'
	DB	CR,LF
	DB	'$'
DOSINIT:
	CLI
	CLD
	MOV	AX,CS
	MOV	ES,AX
	LODB
	CBW
	MOV	CX,AX
	SEG	CS
	MOV	[NUMIO],AL
	MOV	DI,AX
	SHL	DI
	MOV	AH,12H
	MUL	AL,AH
	MOV	BX,DRVTAB
	ADD	DI,BX
	ADD	AX,DI
	MOV	BP,AX
	SEG	CS
	MOV	[FATBASE],AX
PERDEV:	SEG	CS
	MOV	[BX],DI
	INC	BX
	INC	BX
	MOV	AL,CH
	STOB
	LODW
	PUSH	SI
	MOV	SI,AX
	MOVB
	LODB
	DEC	AL
	STOB
	CBW
FIGSHFT:
	INC	AH
	SAR	AL
	JNZ	FIGSHFT
	MOV	AL,AH
	STOB
	LODW
	STOW
	MOV	DX,AX
	LODB
	STOB
	MOV	AH,AL
	PUSH	AX
	LODB
	STOB
	MUL	AL,AH
	ADD	AX,DX
	STOW
	MOV	DX,AX
	LODB
	STOB
	CBW
	ADD	AX,DX
	STOW
	POP	DX
	LODW
	INC	AX
	STOW
	XOR	AL,AL
	STOB
	POP	SI
	LODW
	SEG	CS
	ADD	AX,[FATBASE]
	STOW
	MOV	DL,0
	SHR	DX
	ADD	AX,DX
	CMP	AX,BP
	JBE	SMFAT
	MOV	BP,AX
SMFAT:	INC	CH
	DEC	CL
	JNZ	PERDEV
	ADD	BP,000FH
	MOV	CL,4
	SHR	BP,CL
	XOR	AX,AX
	MOV	DS,AX
	MOV	ES,AX
	MOV	DI,INTBASE
	MOV	AX,QUIT
	STOW
	MOV	AX,CS
	MOV	B,[ENTRYPOINT],0EAH
	MOV	W,[ENTRYADDR],ENTRY
	MOV	[ENTRYSEG],CS
	STOW
	STOW
	STOW
	MOV	W,[INTBASE+4],COMMAND		;INT 21H
	MOV	DI,INTBASE+14H			;INT 25H absolute disk read
	MOV	AX,BIOSREAD
	STOW
	MOV	AX,BIOSSEG
	STOW
	STOW
	STOW
	MOV	W,[INTBASE+18H],BIOSWRITE	;INT 26H absolute disk write
	MOV	DX,CS
	MOV	DS,DX
	ADD	DX,BP
	MOV	W,[DMAADD],0080H		;default DMA
	MOV	[DMAADD+2],DX
	MOV	AX,[DRVTAB]
	MOV	[CURDRV],AX
	MOV	CX,DX
	MOV	BX,000FH
MEMSCAN:
	INC	CX
	JZ	SETEND
	MOV	DS,CX
	MOV	AL,[BX]
	NOT	AL
	MOV	[BX],AL
	CMP	AL,[BX]
	NOT	AL
	MOV	[BX],AL
	JZ	MEMSCAN
SETEND:	SEG	CS
	MOV	[ENDMEM],CX
	XOR	CX,CX
	MOV	DS,CX
	MOV	W,[EXIT],0100H
	MOV	[EXIT+2],DX
	MOV	W,[CTRLC],0100H
	MOV	[CTRLC+2],DX
	CALL	SETMEM
	MOV	SI,HEADER
	CALL	OUTMES
	RET	L			;return from DOSINIT to bios INIT

QUIT:	MOV	AH,0
	JP	SAVREGS

COMMAND:				;INT 21H
	CMP	AH,MAXCOM
	JBE	SAVREGS
BADCALL:
	MOV	AL,0
	IRET

ENTRY:	POP	AX
	POP	AX
	SEG	CS
	POP	[TEMP]
	PUSHF
	CLI
	PUSH	AX
	SEG	CS
	PUSH	[TEMP]
	CMP	CL,MAXCALL
	JA	BADCALL
	MOV	AH,CL
SAVREGS:
	SEG	CS
	MOV	[SPSAVE],SP
	SEG	CS
	MOV	[SSSAVE],SS
	INC	SP
	INC	SP
	SEG	CS
	POP	[TEMP]
	MOV	SP,CS
	MOV	SS,SP
	MOV	SP,SSSAVE
	PUSH	ES
	PUSH	DS
	PUSH	BP
	PUSH	DI
	PUSH	SI
	PUSH	DX
	PUSH	CX
	PUSH	BX
	PUSH	AX
	MOV	BL,AH
	MOV	BH,0
	SHL	BX
	CLD
	SEG	CS
	CALL	[BX+DISPATCH]
	SEG	CS
	MOV	[AXSAVE],AL
	POP	AX
	POP	BX
	POP	CX
	POP	DX
	POP	SI
	POP	DI
	POP	BP
	POP	DS
	POP	ES
	POP	SS
	SEG	CS
	MOV	SP,[SPSAVE]
	IRET

DISPATCH
	DW	ABORT		;0
	DW	CONIN
	DW	CONOUT
	DW	READER
	DW	PUNCH
	DW	LIST		;5
	DW	RAWIO
	DW	GETIO
	DW	SETIO
	DW	PRTBUF
	DW	BUFIN		;10
	DW	CONSTAT
	DW	GETVER
	DW	DSKRESET
	DW	SELDSK
	DW	OPEN		;15
	DW	CLOSE
	DW	SRCHFRST
	DW	SRCHNXT
	DW	DELETE
	DW	SEQRD		;20
	DW	SEQWRT
	DW	CREATE
	DW	RENAME
	DW	INUSE
	DW	GETDRV		;25
	DW	SETDMA
	DW	GETFATPT
	DW	GETFATPTDL
	DW	GETRDONLY
	DW	SETATTRIB	;30
	DW	GETDSKPT
	DW	USERCODE
	DW	RNDRD
	DW	RNDWRT
	DW	FILESIZE	;35
	DW	SETRNDREC
	DW	SETVECT
	DW	NEWBASE
	DW	BLKRD
	DW	BLKWRT		;40
	DW	MAKEFCB		;not in version .11

GETIO:
SETIO:
GETVER:
GETFATPTDL:
GETRDONLY:
SETATTRIB:
USERCODE:
	MOV	AL,0
	RET

READER:	CALL	BIOSAUXIN,BIOSSEG
	RET

PUNCH:	MOV	AL,DL
	CALL	BIOSAUXOUT,BIOSSEG
	RET

UNPACK:

; Inputs:
;       DS = CS
;       BX = Cluster number
;       BP = Base of drive parameters
;       SI = Pointer to drive FAT
; Outputs:
;       DI = Contents of FAT for given cluster
;       Zero set means DI=0 (free cluster)
; No other registers affected. Fatal error if cluster too big.

	CMP	BX,[BP+MAXCLUS]
	JA	HURTFAT
	LEA	DI,[BX+SI]
	SHR	BX
	MOV	DI,[BX+DI]
	JNB	HAVCLUS
	SHR	DI
	SHR	DI
	SHR	DI
	SHR	DI
	STC
HAVCLUS:
	RCL	BX
	AND	DI,0FFFH
	RET

HURTFAT:
	MOV	SI,BADFAT
	CALL	OUTMES
	JMP	L0571

PACK:

; Inputs:
;       DS = CS
;       BX = Cluster number
;       DX = Data
;       SI = Pointer to drive FAT
; Outputs:
;       The data is stored in the FAT at the given cluster.
;       BX,DX,DI all destroyed
;       No other registers affected


	MOV	DI,BX
	SHR	BX
	ADD	BX,SI
	ADD	BX,DI
	SHR	DI
	MOV	DI,[BX]
	JNB	ALIGNED
	SHL	DX
	SHL	DX
	SHL	DX
	SHL	DX
	AND	DI,000FH
	JP	PACKIN

ALIGNED:
	AND	DI,0F000H
PACKIN:	OR	DI,DX
	MOV	[BX],DI
RET1:	RET

GETNAME:

; Inputs:
;       DS,DX point to FCB
; Function:
;       Find file name in disk directory. First byte is
;       drive number (0=current disk). "?" matches any
;       character.
; Outputs:
;       Carry set if file not found
;       ELSE
;       Zero set if attributes match (always except when creating)
;       BP = Base of drive parameters
;       DS = CS
;       ES = CS
;       BX = Pointer into directory buffer
;       SI = Pointer to First Cluster field in directory entry
;       [DIRBUF] has directory record with match
;       [NAME1] has file name
; All other registers destroyed.


	CALL	MOVNAME
	JB	RET1
FINDNAME:
	MOV	AX,CS
	MOV	DS,AX
	MOV	AL,0
L028E:	MOV	BX,DIRBUF-16
L0291:	PUSH	BX
	PUSH	AX
	CALL	DIRREAD
	POP	AX
	POP	BX
L0298:	CALL	NEXTENT
	JZ	RET1
NDIRREC:
	INC	AL
	CMP	AL,[BP+DIRSIZ]
	JB	L028E
	STC
L02A5:	RET

NEXTENT:
	ADD	BX,16
	CMP	BX,DIRBUF+127
	JA	L02A5
	CMP	B,[BX],0E5H
	JZ	NEXTENT
	MOV	SI,BX
	MOV	DI,NAME1
	MOV	CX,11
L02BC:	REPE
	CMPB
	JZ	L02A5
	CMP	B,[DI-1],'?'
	JZ	L02BC
	JP	NEXTENT

DELETE:	CALL	GETNAME
	JB	L033D
	PUSH	AX
	PUSH	BX
	CALL	LOADFAT
	POP	BX
L02D3:	MOV	B,[BX],0E5H
	PUSH	BX
	MOV	BX,[BX+11]
	MOV	SI,[BP+FAT]
	OR	BX,BX
	JZ	L02E9
	CMP	BX,[BP+MAXCLUS]
	JA	L02E9
	CALL	RELEASE
L02E9:	POP	BX
	CALL	NEXTENT
	JZ	L02D3
	POP	AX
	PUSH	AX
	CALL	DIRWRITE
	POP	AX
	CALL	NDIRREC
	PUSH	AX
	JNB	L02D3
	POP	AX
	CALL	FATWRT
	XOR	AL,AL
	RET

RENAME:	CALL	MOVNAME
	JB	L033D
	ADD	SI,5
	MOV	DI,NAME2
	CALL	LODNAME
	CALL	FINDNAME
	JB	L033D
L0315:	MOV	AH,AL
L0317:	MOV	DI,BX
	MOV	SI,NAME2
	MOV	CX,11
L031F:	LODB
	CMP	AL,'?'
	JZ	L0326
	MOV	[DI],AL
L0326:	INC	DI
	LOOP	L031F
	CALL	NEXTENT
	JZ	L0317
	MOV	AL,AH
	PUSH	AX
	CALL	DIRWRITE
	POP	AX
	CALL	NDIRREC
	JNB	L0315
	XOR	AL,AL
	RET

L033D:	MOV	AL,-1
L033F:	RET

MOVNAME:
	MOV	AX,CS
	MOV	ES,AX
	MOV	DI,NAME1
	MOV	SI,DX
	LODB
	SEG	ES
	CMP	[NUMIO],AL
	JB	L033F
	CBW
	XCHG	BP,AX
	SHL	BP
	MOV	BP,[BP+CURDRV]
LODNAME:
	MOV	CX,11
L035C:	LODB
	AND	AL,7FH
	CMP	AL,60H	;'a'-1
	JLE	L0365
	AND	AL,5FH	;convert to uppercase
L0365:	CMP	AL,' '
	JB	L033F
	STOB
	LOOP	L035C
L036C:	RET

OPEN:	PUSH	DX
	PUSH	DS
	CALL	GETNAME
L0372:	POP	ES
	POP	DI
	JB	L033D
	MOV	AH,[BP+DEVNUM]
	INC	AH
	SEG	ES
	MOV	[DI],AH
	SEG	ES
	MOV	[DI+0CH],0
	ADD	DI,16
	MOV	CX,BX
	SUB	CX,DIRBUF
	MOV	AH,CL
	STOW
	MOV	AX,BP
	STOW
	LEA	SI,[BX+11]
	LODW
	STOW
	STOW
	LODB
	SHL	AL
	LODW
	RCL	AX
	STOW
	XOR	AX,AX
	STOW
	STOW
LOADFAT:
	TEST	B,[BP+DIRTY],-1
	JNZ	L036C
	CALL	FIGFAT
L03AD:	PUSH	DX
	PUSH	CX
	PUSH	BX
	PUSH	AX
	CALL	DREAD
	OR	AL,AL
	POP	AX
	POP	BX
	POP	CX
	POP	DX
	JNZ	L03C5
	SUB	AL,[BP+FATCNT]
	JZ	L036C
	NEG	AL
	JP	FATWRT

L03C5:	ADD	DX,CX
	DEC	AL
	JNZ	L03AD
	POP	BP
	MOV	SI,ALLBAD
	CALL	HARDERR
	JP	LOADFAT

CLOSE:	MOV	DI,DX
	TEST	B,[DI+FLSFLG],-1
	JZ	L03E9
	PUSH	DI
	MOV	BP,[DI+DRVBP]
	MOV	AL,[BP+DEVNUM]
	CALL	BIOSDSKCHG,BIOSSEG
	POP	DI
L03E9:	TEST	B,[DI+SIZCHG],-1
	JZ	L0440
	MOV	DX,DI
	PUSH	DX
	PUSH	DS
	CALL	GETNAME
	POP	ES
	POP	DI
	JB	L0443
	MOV	CX,BX
	SUB	CX,DIRBUF
	MOV	AH,CL
	SEG	ES
	CMP	AX,[DI+ENTPOS]
	JNZ	L0443
	SEG	ES
	MOV	CX,[DI+FIRCLUS]
	MOV	[BX+11],CX
	SEG	ES
	MOV	DX,[DI+FILSIZ]
	SHR	DX
	MOV	[BX+14],DX
	MOV	DL,0
	RCR	DL
	MOV	[BX+13],DL
	CALL	DIRWRITE
L0422:	TEST	B,[BP+DIRTY],-1
	JZ	L0440
FATWRT:	MOV	B,[BP+DIRTY],0
	CALL	FIGFAT
L042F:	PUSH	DX
	PUSH	CX
	PUSH	BX
	PUSH	AX
	CALL	DWRITE
	POP	AX
	POP	BX
	POP	CX
	POP	DX
	ADD	DX,CX
	DEC	AL
	JNZ	L042F
L0440:	MOV	AL,0
	RET

L0443:	MOV	B,[BP+DIRTY],0
	MOV	AL,-1
	RET

FIGFAT:	MOV	AL,[BP+FATCNT]
	MOV	BX,[BP+FAT]
	MOV	CL,[BP+FATSIZ]
	MOV	CH,0
	MOV	DX,[BP+FIRFAT]
	RET

DIRCOMP:
	MOV	AH,[BP+0]
	MOV	[L0E09],AX
	CBW
	ADD	AX,[BP+FIRDIR]
	MOV	DX,AX
	MOV	BX,DIRBUF
	MOV	CX,1
	RET

CREATE:	CALL	MOVNAME
	JB	L04A8
	MOV	DI,NAME1
	MOV	CX,11
	MOV	AL,'?'
	REPNE
	SCAB
	JZ	L04A8
	PUSH	DX
	PUSH	DS
	CALL	FINDNAME
	JNB	L04AB
	MOV	AX,CS
	MOV	DS,AX
	XOR	AX,AX
L048A:	PUSH	AX
	CALL	DIRREAD
	POP	AX
	MOV	DI,DIRBUF-16
	MOV	CX,8
L0495:	ADD	DI,16
	CMP	B,[DI],0E5H
	LOOPNZ	L0495
	JZ	L04D1
	INC	AL
	CMP	AL,[BP+DIRSIZ]
	JB	L048A
	POP	DS
	POP	DX
L04A8:	MOV	AL,-1
	RET

L04AB:	XOR	CX,CX
	MOV	[BX+0DH],CX
	MOV	[BX+0FH],CL
	XCHG	CX,[BX+0BH]
	JCXZ	L04EB
	PUSH	BX
	PUSH	AX
	CMP	CX,[BP+0DH]
	JA	L04E6
	PUSH	CX
	CALL	LOADFAT
	POP	BX
	MOV	SI,[BP+10H]
	CALL	RELEASE
	CALL	FATWRT
	POP	AX
	PUSH	AX
	JP	L04E6

L04D1:	MOV	BX,DI
	MOV	SI,NAME1
	MOV	CX,5
	MOVB
	REPE
	MOVSW
	XCHG	AL,AH
	MOV	CL,5
	REPE
	STOB
	XCHG	AL,AH
	PUSH	BX
	PUSH	AX
L04E6:	CALL	DIRWRITE
	POP	AX
	POP	BX
L04EB:	JMP	L0372

DIRREAD:
	CALL	DIRCOMP
DREAD:	MOV	AL,[BP+DEVNUM]
	PUSH	BP
	PUSH	BX
	PUSH	CX
	PUSH	DX
	CALL	BIOSREAD,BIOSSEG
	POP	DX
	POP	DI
	POP	BX
	POP	BP
	JB	L0506
	XOR	AL,AL
	RET

L0506:	MOV	SI,RDERR
	CALL	HARDERR
	JP	DREAD

DIRWRITE:
	CALL	DIRCOMP
DWRITE:	MOV	AL,[BP+DEVNUM]
	MOV	AH,0
	CMP	DX,[BP+FIRREC]
	RCR	AH
	PUSH	BP
	PUSH	BX
	PUSH	CX
	PUSH	DX
	CALL	BIOSWRITE,BIOSSEG
	POP	DX
	POP	DI
	POP	BX
	POP	BP
	JB	L052D
	XOR	AL,AL
L052C:	RET

L052D:	MOV	SI,WRERR
	CALL	HARDERR
	JP	DWRITE

HARDERR:
	SUB	DI,CX
	ADD	DX,DI
	CALL	RECTOBYT
	ADD	BX,DI
	CALL	OUTMES
L0541:	CALL	IN
	OR	AL,' '
	CMP	AL,'a'
	JZ	L0571
	CMP	AL,'r'
	JZ	L052C
	CMP	AL,'i'
	JZ	L055A
	CMP	AL,'c'
	JNZ	L0541
	POP	AX
	MOV	AL,1
	RET

L055A:	POP	AX
	MOV	AL,0
	RET

ABORT:	SEG	CS
	MOV	DS,[TEMP]
	XOR	AX,AX
	MOV	ES,AX
	MOV	SI,SAVEXIT
	MOV	DI,EXIT
	MOVSW
	MOVSW
	MOVSW
	MOVSW
L0571:	MOV	SP,BPSAVE
	MOV	AX,CS
	MOV	DS,AX
	MOV	ES,AX
	CALL	NOBUF
	XOR	AX,AX
	MOV	DS,AX
	MOV	SI,EXIT
	MOV	DI,EXITHOLD
	MOVSW
	MOVSW
	POP	BP
	POP	ES
	POP	ES
	POP	DS
	POP	SS
	MOV	SP,[SPSAVE]
	MOV	DS,[DSSAVE]
	SEG	CS
	JMP	L,[EXITHOLD]

SEQRD:	CALL	GETREC
	MOV	CX,1
	CALL	LOAD
	JCXZ	L05EE
	INC	AX
	JP	L05EE

SEQWRT:	CALL	GETREC
	MOV	CX,1
	CALL	STORE
	JCXZ	L05EE
	INC	AX
	JP	L05EE

RNDRD:	MOV	CX,1
	MOV	DI,DX
	MOV	AX,[DI+RR]
	CALL	LOAD
	JP	L05EA

RNDWRT:	MOV	CX,1
	MOV	DI,DX
	MOV	AX,[DI+RR]
	CALL	STORE
	JP	L05EA

BLKRD:	MOV	DI,DX
	MOV	AX,[DI+RR]
	CALL	LOAD
	JP	L05E3

BLKWRT:	MOV	DI,DX
	MOV	AX,[DI+RR]
	CALL	STORE
L05E3:	MOV	[CXSAVE],CX
	JCXZ	L05EA
	INC	AX
L05EA:	SEG	ES
	MOV	[DI+RR],AX
L05EE:	MOV	CX,AX
	AND	AL,7FH
	SEG	ES
	MOV	[DI+NR],AL
	AND	CL,80H
	ROL	CX
	XCHG	CL,CH
	SEG	ES
	MOV	[DI+EXTENT],CX
	MOV	AL,[DSKERR]
L0604:	RET

SETUP:	MOV	BP,[DI+DRVBP]
	MOV	BX,DS
	MOV	ES,BX
	MOV	BX,CS
	MOV	DS,BX
	MOV	[RECPOS],AX
	MOV	[FCB],DX
	MOV	BX,[DMAADD]
	MOV	[NEXTADD],BX
	MOV	B,[DSKERR],0
	MOV	W,[NUMTRNS],0
	MOV	SI,[BP+FAT]
	JCXZ	L0604
	ADD	BX,007FH
	JB	L0651
	AND	BL,80H
	NEG	BX
	ROL	BX
	XCHG	BL,BH
	JNZ	L0641
	MOV	BH,2
L0641:	CMP	CX,BX
	JBE	L064C
	MOV	CX,BX
	MOV	B,[DSKERR],2
L064C:	MOV	[RECCNT],CX
	RET

L0651:	MOV	B,[DSKERR],2
	MOV	CX,0
	POP	BX
L065A:	RET

FNDCLUS:
	SEG	ES
	MOV	BX,[DI+LSTCLUS]
	SEG	ES
	MOV	DX,[DI+CLUSPOS]
	OR	BX,BX
	JZ	L0684
	SUB	CX,DX
	JNB	L0673
	ADD	CX,DX
	XOR	DX,DX
	SEG	ES
	MOV	BX,[DI+FIRCLUS]
L0673:	JCXZ	L065A
SKPCLP:
	CALL	UNPACK
	CMP	DI,0FFFH
	JZ	L065A
	XCHG	BX,DI
	INC	DX
	LOOP	SKPCLP
	RET

L0684:	INC	CX
	DEC	DX
	RET

LOAD:	CALL	SETUP
	SEG	ES
	MOV	BX,[DI+FILSIZ]
	SUB	BX,AX
	JBE	L0709
	CMP	BX,CX
	JNB	L069F
	MOV	B,[DSKERR],1
	MOV	[RECCNT],BX
L069F:	MOV	CL,[BP+CLUSSHFT]
	SHR	AX,CL
	MOV	CX,AX
	CALL	FNDCLUS
	OR	CX,CX
	JNZ	L0709
	MOV	DL,[RECPOS]
	AND	DL,[BP+CLUSMSK]
	MOV	CX,[RECCNT]
L06B8:	CALL	OPTIMIZE
	PUSH	DI
	PUSH	AX
	PUSH	DS
	MOV	DS,[DMAADD+2]
	CALL	DREAD
	POP	DS
	POP	CX
	POP	BX
	JCXZ	SETFCB
	MOV	DL,0
	CMP	BX,0FFFH
	JNZ	L06B8
	MOV	B,[DSKERR],1
SETFCB:	MOV	AX,[CLUSNUM]
	MOV	DI,[FCB]
	SEG	ES
	MOV	[DI+LSTCLUS],AX
	MOV	AX,[RECPOS]
	MOV	BX,[NUMTRNS]
	ADD	AX,BX
	SEG	ES
	CMP	AX,[DI+FILSIZ]
	JBE	L06FA
	SEG	ES
	MOV	[DI+FILSIZ],AX
	SEG	ES
	MOV	B,[DI+SIZCHG],-1
L06FA:	DEC	AX
	MOV	DX,AX
	MOV	CL,[BP+CLUSSHFT]
	SHR	DX,CL
	SEG	ES
	MOV	[DI+CLUSPOS],DX
	MOV	CX,BX
	RET

L0709:	XOR	CX,CX
	JP	L071B

L070D:	MOV	CX,AX
	PUSH	BX
	CALL	SKPCLP		;was FNDCLUS in version .11
	JCXZ	L0758
	CALL	ALLOCATE
	POP	BX
	JNB	L0759
L071B:	MOV	B,[DSKERR],1
	MOV	AX,[RECPOS]
	MOV	DI,[FCB]
	RET

STORE:	CALL	SETUP
	JCXZ	WRTEOF
	MOV	BX,CX
	ADD	BX,AX
	DEC	BX
	MOV	CL,[BP+CLUSSHFT]
	SHR	AX,CL
	SHR	BX,CL
	MOV	CX,AX
	MOV	AX,BX
	CALL	FNDCLUS
	SUB	AX,DX
	JZ	L0759
	JCXZ	L070D
	PUSH	CX
	MOV	CX,AX
	CALL	ALLOCATE
	POP	AX
	JB	L071B
	MOV	CX,AX
	DEC	CX
	JZ	L0759
	CALL	SKPCLP
	PUSH	BX
L0758:	POP	BX
L0759:	MOV	DL,[RECPOS]
	AND	DL,[BP+CLUSMSK]
	MOV	CX,[RECCNT]
L0764:	CALL	OPTIMIZE
	PUSH	DI
	PUSH	AX
	PUSH	DS
	MOV	DS,[DMAADD+2]
	CALL	DWRITE
	POP	DS
	POP	CX
	POP	BX
	MOV	DL,0
	OR	CX,CX
	JNZ	L0764
	CALL	SETFCB
	SEG	ES
	MOV	B,[DI+FLSFLG],-1
	RET

WRTEOF:	OR	AX,AX
	JZ	KILLFIL
	DEC	AX
	MOV	CL,[BP+CLUSSHFT]
	SHR	AX,CL
	MOV	CX,AX
	CALL	FNDCLUS
	JCXZ	RELFILE
	CALL	ALLOCATE
	JB	L071B
UPDATE:	MOV	DI,[FCB]
	MOV	AX,[RECPOS]
	SEG	ES
	MOV	[DI+FILSIZ],AX
	SEG	ES
	MOV	B,[DI+SIZCHG],-1
	XOR	CX,CX
	RET

RELFILE:
	MOV	DX,0FFFH
	CALL	RELBLKS
SETDIRT:
	MOV	B,[BP+DIRTY],-1
	JP	UPDATE

KILLFIL:
	XOR	BX,BX
	SEG	ES
	XCHG	BX,[DI+FIRCLUS]
	CALL	RELEASE
	JP	SETDIRT

OPTIMIZE:
	PUSH	DX
	PUSH	BX
	MOV	AL,[BP+CLUSMSK]
	INC	AL
	MOV	AH,AL
	SUB	AL,DL
	MOV	DX,CX
	MOV	SI,[BP+FAT]
	MOV	CX,0
L07D6:	CALL	UNPACK
	ADD	CL,AL
	ADC	CH,0
	CMP	CX,DX
	JNB	L0819
	MOV	AL,AH
	INC	BX
	CMP	DI,BX
	JZ	L07D6
	DEC	BX
L07EA:	MOV	[CLUSNUM],BX
	SUB	DX,CX
	MOV	AX,DX
	MOV	BX,CX
	XCHG	BL,BH
	ROR	BX
	MOV	SI,[NEXTADD]
	ADD	BX,SI
	MOV	[NEXTADD],BX
	ADD	[NUMTRNS],CX
	POP	DX
	POP	BX
	PUSH	CX
	MOV	CL,[BP+CLUSSHFT]
	DEC	DX
	DEC	DX
	SHL	DX,CL
	OR	DL,BL
	ADD	DX,[BP+FIRREC]
	POP	CX
	MOV	BX,SI
	RET

L0819:	MOV	CX,DX
	JP	L07EA

GETREC:	MOV	DI,DX
	MOV	AL,[DI+NR]
	MOV	BX,[DI+EXTENT]
	SHL	AL
	SHR	BX
	RCR	AL
	MOV	AH,BL
	RET

ALLOCATE:
	PUSH	DX
	PUSH	CX
	PUSH	BX
	MOV	AX,BX
L0833:	MOV	DX,BX
L0835:	INC	BX
	CMP	BX,[BP+MAXCLUS]
	JLE	TRYOUT
	CMP	AX,1
	JG	TRYIN
	POP	BX
	MOV	DX,0FFFH
	CALL	RELBLKS
	OR	[SI],0FFFH
	POP	AX
	SUB	AX,CX
	POP	DX
	INC	DX
	ADD	AX,DX
	MOV	DL,[BP+CLUSMSK]
	MOV	DH,0
	INC	DX
	MUL	AX,DX
	MOV	CX,AX
	SUB	CX,[RECPOS]
	JA	L0864
	XOR	CX,CX
L0864:	STC
L0865:	RET

TRYOUT:	CALL	UNPACK
	JZ	FINDFRE
TRYIN:	DEC	AX
	JLE	L0835
	XCHG	BX,AX
	CALL	UNPACK
	JZ	FINDFRE
	XCHG	BX,AX
	JP	L0835

FINDFRE:
	XCHG	BX,DX
	MOV	AX,DX
	CALL	PACK
	MOV	BX,AX
	LOOP	L0833
	MOV	DX,0FFFH
	CALL	PACK
	MOV	B,[BP+DIRTY],-1
	POP	BX
	POP	CX
	POP	DX
	CALL	UNPACK
	XCHG	BX,DI
	OR	DI,DI
	JNZ	L0865
	MOV	DI,[FCB]
	SEG	ES
	MOV	[DI+FIRCLUS],BX
	OR	[SI],0FFFH
L08A4:	RET

RELEASE:
	XOR	DX,DX
RELBLKS:
	CALL	UNPACK
	JZ	L08A4
	MOV	AX,DI
	CALL	PACK
	CMP	AX,0FFFH
	MOV	BX,AX
	JNZ	RELEASE
L08B8:	RET

GETEOF:	CALL	UNPACK
	CMP	DI,0FFFH
	JZ	L08B8
	MOV	BX,DI
	JP	GETEOF

SRCHFRST:
	CALL	GETNAME
L08C9:	JB	L08F5
	MOV	[SRCHDON],AL
	MOV	[PDIR],BX
	MOV	[SRCHBP],BP
	MOV	SI,BX
	LES	DI,[DMAADD]
	MOV	AL,[BP+0]
	INC	AL
	STOB
	MOVB
	MOV	CX,5
	REPE
	MOVSW
	MOV	AL,0
	STOB
	MOV	CX,7
	REPE
	STOW
	MOVSW
	MOVSW
	MOVB
	STOB
	RET

L08F5:	MOV	AL,-1
	MOV	[SRCHDON],AL
L08FA:	RET

SRCHNXT:
	CALL	MOVNAME
	JB	L08F5
	MOV	AX,CS
	MOV	DS,AX
	MOV	AL,[SRCHDON]
	CMP	AL,-1
	JZ	L08FA
	MOV	AH,[BP+0]
	MOV	BX,[PDIR]
	MOV	BP,[SRCHBP]
	CMP	AX,[L0E09]
	JNZ	L0921
	CALL	L0298
	JP	L08C9

L0921:	CALL	L0291
	JP	L08C9

FILESIZE:
	PUSH	DS
	PUSH	DX
	CALL	GETNAME
	POP	DI
	POP	ES
	MOV	AL,-1
	JB	L08FA
	ADD	DI,33
	LEA	SI,[BX+13]
	LODB
	SHL	AL
	LODW
	RCL	AX
	STOW
	MOV	AL,0
	RCL	AL
	STOB
	MOV	AL,0
	RET

SETDMA:	SEG	CS
	MOV	[DMAADD],DX
	SEG	CS
	MOV	[DMAADD+2],DS
	RET

GETFATPT:
	MOV	AX,CS
	MOV	DS,AX
	MOV	[DSSAVE],CS
	MOV	BP,[CURDRV]
	CALL	LOADFAT
	MOV	BX,[BP+FAT]
	MOV	AL,[BP+CLUSMSK]
	INC	AL
	MOV	DX,[BP+MAXCLUS]
	DEC	DX
	MOV	B,[BP+DIRTY],-1
	MOV	[BXSAVE],BX
	MOV	[DXSAVE],DX
	RET

GETDSKPT:
	SEG	CS
	MOV	[DSSAVE],CS
	SEG	CS
	MOV	BX,[CURDRV]
	SEG	CS
	MOV	[BXSAVE],BX
	RET

DSKRESET:
	SEG	CS
	MOV	[DMAADD+2],DS
	MOV	AX,CS
	MOV	DS,AX
	MOV	[DMAADD],0080H
	MOV	AX,[DRVTAB]
	MOV	[CURDRV],AX
NOBUF:	MOV	CL,[NUMIO]
	MOV	CH,0
	MOV	SI,DRVTAB
L09A7:	LODW
	PUSH	CX
	PUSH	SI
	MOV	BP,AX
	CALL	L0422
	POP	SI
	POP	CX
	LOOP	L09A7
	MOV	AL,-1
	CALL	BIOSDSKCHG,BIOSSEG
	RET

GETDRV:	SEG	CS
	MOV	BP,[CURDRV]
	MOV	AL,[BP+0]
	RET

INUSE:	MOV	AX,CS
	MOV	DS,AX
	MOV	CL,[NUMIO]
	MOV	CH,0
	MOV	SI,CX
	SHL	SI
	ADD	SI,CURDRV
	MOV	BX,0
	STD
L09DA:	LODW
	MOV	BP,AX
	TEST	B,[BP+DIRTY],-1
	JZ	L09E4
	STC
L09E4:	RCL	BX
	LOOP	L09DA
	MOV	AL,BL
	RET

SETRNDREC:
	CALL	GETREC
	MOV	[DI+RR],AX
	MOV	AL,0
	JZ	L09F7
	INC	AL
L09F7:	MOV	[DI+RR+2],AL
L09FA:	RET

SELDSK:	MOV	DH,0
	MOV	BX,DX
	PUSH	CS
	POP	DS
	MOV	AL,[NUMIO]
	CMP	BL,AL
	JNB	L09FA
	SHL	BX
	MOV	DX,[BX+DRVTAB]
	MOV	[CURDRV],DX
L0A12:	RET

BUFIN:	MOV	AX,CS
	MOV	ES,AX
	MOV	SI,DX
	MOV	CH,0
	LODW
	OR	AL,AL
	JZ	L0A12
	MOV	BL,AH
	MOV	BH,CH
	CMP	AL,BL
	JBE	L0A2D
	CMP	B,[BX+SI],0DH
	JZ	L0A2F
L0A2D:	MOV	BL,CH
L0A2F:	MOV	DL,AL
	DEC	DX
L0A32:	SEG	CS
	MOV	AL,[CARPOS]
	SEG	CS
	MOV	[STARTPOS],AL
	PUSH	SI
	MOV	DI,INBUF
	MOV	AH,CH
	MOV	BH,CH
	MOV	DH,CH
GETCH:	CALL	IN
	CMP	AL,7FH
	JZ	BACKSP
	CMP	AL,8
	JZ	BACKSP
	CMP	AL,0DH
	JZ	L0A8B
	CMP	AL,0AH
	JZ	L0AAF
	CMP	AL,CANCEL
	JZ	KILNEW
	CMP	AL,ESCCH
	JZ	ESC
L0A5F:	CMP	DH,DL
	JNB	GETCH
	STOB
	INC	DH
	CALL	L0BC4
	OR	AH,AH
	JNZ	GETCH
	CMP	BH,BL
	JNB	GETCH
	INC	SI
	INC	BH
	JP	GETCH

ESC:	CALL	IN
	MOV	CL,ESCTABLEN
	PUSH	DI
	MOV	DI,ESCTAB
	REPNE
	SCAB
	POP	DI
	AND	CL,0FEH
	MOV	BP,CX
	JMP	[BP+ESCFUNC]

L0A8B:	STOB
	CALL	OUT
	POP	DI
	MOV	[DI-1],DH
	INC	DH
COPYNEW:	MOV	BP,ES
	MOV	BX,DS
	MOV	ES,BX
	MOV	DS,BP
	MOV	SI,INBUF
	MOV	CL,DH
	REPE
	MOVB
	RET

CRLF:	MOV	AL,0DH
	CALL	OUT
	MOV	AL,0AH
	JMP	OUT

L0AAF:	CALL	CRLF
	JP	GETCH

KILNEW:	MOV	AL,'\'
	CALL	OUT
	POP	SI
L0ABA:	CALL	CRLF
	SEG	CS
	MOV	AL,[STARTPOS]
	CALL	L0C3E
	JMP	L0A32

BACKSP:	OR	DH,DH
	JZ	L0ADC
	CALL	BACKUP
	SEG	ES
	MOV	AL,[DI]
	CMP	AL,' '
	JNB	L0ADC
	CMP	AL,9
	JZ	L0AEA
	CALL	BACKMES
L0ADC:	OR	AH,AH
	JNZ	L0AE7
	OR	BH,BH
	JZ	L0AE7
	DEC	BH
	DEC	SI
L0AE7:	JMP	GETCH

L0AEA:	PUSH	DI
	DEC	DI
	STD
	MOV	CL,DH
	MOV	AL,' '
	PUSH	BX
	MOV	BL,7
	JCXZ	L0B04
L0AF6:	SCAB
	JBE	L0B02
	SEG	ES
	CMP	B,[DI+1],9
	JZ	L0B09
	DEC	BL
L0B02:	LOOP	L0AF6
L0B04:	SEG	CS
	SUB	BL,[STARTPOS]
L0B09:	SUB	BL,DH
	ADD	CL,BL
	AND	CL,7
	CLD
	POP	BX
	POP	DI
	JZ	L0ADC
L0B15:	CALL	BACKMES
	LOOP	L0B15
	JP	L0ADC

BACKUP:	DEC	DH
	DEC	DI
BACKMES:
	MOV	AL,8
	CALL	OUT
	MOV	AL,' '
	CALL	OUT
	MOV	AL,8
	JMP	OUT

TWOESC:	MOV	AL,ESCCH	;was 1BH esc for non-IBM
	JMP	L0A5F

COPYLIN:
	MOV	CL,BL
	SUB	CL,BH
	JP	L0B40

COPYSTR:
	CALL	L0B6A
	JP	L0B40

COPYONE:
	MOV	CL,1
L0B40:	CMP	DH,DL
	JZ	L0B53
	CMP	BH,BL
	JZ	L0B53
	LODB
	STOB
	CALL	L0BC4
	INC	BH
	INC	DH
	LOOP	L0B40
L0B53:	JMP	GETCH

SKIPONE:
	CMP	BH,BL
	JZ	L0B53
	INC	BH
	INC	SI
	JMP	GETCH

SKIPSTR:
	CALL	L0B6A
	ADD	SI,CX
	ADD	BH,CL
	JMP	GETCH

L0B6A:	CALL	IN
	MOV	CL,BL
	SUB	CL,BH
	JZ	L0B8A
	DEC	CX
	JZ	L0B8A
	PUSH	ES
	PUSH	DS
	POP	ES
	PUSH	DI
	MOV	DI,SI
	INC	DI
	REPNE
	SCAB
	POP	DI
	POP	ES
	JNZ	L0B8A
	NOT	CL
	ADD	CL,BL
	SUB	CL,BH
L0B89:	RET

L0B8A:	POP	BP
	JMP	GETCH

REEDIT:	MOV	AL,'@'
	CALL	OUT
	POP	DI
	PUSH	DI
	PUSH	ES
	PUSH	DS
	CALL	COPYNEW
	POP	DS
	POP	ES
	POP	SI
	MOV	BL,DH
	JMP	L0ABA

ENTERINS:
	MOV	AH,-1
	JMP	GETCH

EXITINS:
	MOV	AH,0
	JMP	GETCH

ESCFUNC	DW	GETCH
	DW	TWOESC
	DW	EXITINS
	DW	ENTERINS
	DW	BACKSP
	DW	REEDIT
	DW	KILNEW
	DW	COPYLIN
	DW	SKIPSTR
	DW	COPYSTR
	DW	SKIPONE
	DW	COPYONE

L0BC4:	CMP	AL,' '
	JNB	OUT
	CMP	AL,9
	JZ	OUT
	PUSH	AX
	MOV	AL,'^'
	CALL	OUT
	POP	AX
	OR	AL,'@'
	JP	OUT

CONOUT:	MOV	AL,DL
OUT:	CMP	AL,' '
	JB	L0C2A
	CMP	AL,7FH
	JZ	L0BE6
	SEG	CS
	INC	B,[CARPOS]
L0BE6:	CALL	BIOSOUT,BIOSSEG
	SEG	CS
	TEST	B,[PFLAG],-1
	JZ	L0BF8
	CALL	BIOSPRINT,BIOSSEG
L0BF8:	CALL	BIOSSTAT,BIOSSEG
	JZ	L0B89
INCHK:	CALL	BIOSIN,BIOSSEG
	CMP	AL,13H
	JNZ	L0C0D
	CALL	BIOSIN,BIOSSEG
L0C0D:	CMP	AL,10H
	JZ	L0C1C
	CMP	AL,0EH
	JZ	L0C23
	CMP	AL,3
	JNZ	L0C1B
	INT	23H
L0C1B:	RET

L0C1C:	SEG	CS
	MOV	B,[PFLAG],1
	RET

L0C23:	SEG	CS
	MOV	B,[PFLAG],0
	RET

L0C2A:	CMP	AL,0DH
	JZ	L0C4C
	CMP	AL,8
	JZ	L0C54
	CMP	AL,9
	JNZ	L0BE6
	SEG	CS
	MOV	AL,[CARPOS]
	OR	AL,0F8H
	NEG	AL
L0C3E:	PUSH	CX
	MOV	CL,AL
	MOV	CH,0
L0C43:	MOV	AL,' '
	CALL	OUT
	LOOP	L0C43
	POP	CX
L0C4B:	RET

L0C4C:	SEG	CS
	MOV	B,[CARPOS],0
	JP	L0BE6

L0C54:	SEG	CS
	DEC	B,[CARPOS]
	JP	L0BE6

CONSTAT:
	CALL	BIOSSTAT,BIOSSEG
	JZ	L0C4B
	OR	AL,0FFH
	RET

CONIN:	CALL	INCHK
	PUSH	AX
	CALL	OUT
	POP	AX
	RET

IN:	CALL	INCHK
	JZ	IN
L0C73:	RET

RAWIO:	MOV	AL,DL
	CMP	AL,-1
	JNZ	L0C87
	CALL	BIOSSTAT,BIOSSEG
	JZ	L0C73
	CALL	BIOSIN,BIOSSEG
	RET

L0C87:	CALL	BIOSOUT,BIOSSEG
	RET

LIST:	MOV	AL,DL
	CALL	BIOSPRINT,BIOSSEG
L0C94:	RET

PRTBUF:	MOV	SI,DX
L0C97:	LODB
	CMP	AL,'$'
	JZ	L0C94
	CALL	OUT
	JP	L0C97

OUTMES:	SEG	CS
	LODB
	CMP	AL,'$'
	JZ	L0C94
	CALL	OUT
	JP	OUTMES

MAKEFCB:			;not in version .11
	MOV	DL,0
	OR	AL,AL
	JZ	L0CB8
L0CB2:	CALL	L0D10
	JZ	L0CB2
	DEC	SI
L0CB8:	CMP	B,[SI+1],3AH	;':'
	JNZ	L0CCC
	CALL	L0D10
	SUB	AL,40H
	JZ	L0CCB
	INC	SI
	CMP	AL,0FH
	JBE	L0CCE
	DEC	SI
L0CCB:	DEC	SI
L0CCC:	XOR	AL,AL
L0CCE:	STOB
	MOV	CX,8
	CALL	L0CED
	CMP	B,[SI],2EH	;'.'
	JNZ	L0CDB
	INC	SI
L0CDB:	MOV	CX,3
	CALL	L0CED
	SEG	CS
	MOV	[SISAVE],SI
	XOR	AX,AX
	STOW
	STOW
	MOV	AL,DL
	RET

L0CED:	CALL	L0D10
	JZ	L0D0A
	CMP	AL,20H	;' '
	JBE	L0D0A
	CMP	AL,2AH	;'*'
	JNZ	L0D00
	MOV	AL,3FH	;'?'
	DEC	CX
	REPE
	STOB
	INC	CX
L0D00:	STOB
	CMP	AL,3FH	;'?'
	JNZ	L0D07
	MOV	DL,1
L0D07:	LOOP	L0CED
	INC	SI
L0D0A:	MOV	AL,20H	;' '
	REPE
	STOB
	DEC	SI
L0D0F:	RET

L0D10:	LODB
	CMP	AL,61H	;'a'
	JB	L0D1B
	CMP	AL,7AH	;'z'
	JA	L0D1B
	SUB	AL,20H	;' '
L0D1B:	CMP	AL,20H	;' '
	JZ	L0D0F
	CMP	AL,3DH	;'='
	JZ	L0D0F
	CMP	AL,2CH	;','
	JZ	L0D0F
	CMP	AL,3BH	;';'
	JZ	L0D0F
	CMP	AL,2EH	;'.'
	JZ	L0D0F
	CMP	AL,3AH	;':'
	JZ	L0D0F
	CMP	AL,9
	RET

SETVECT:
	XOR	BX,BX
	MOV	ES,BX
	MOV	BL,AL
	SHL	BX
	SHL	BX
	SEG	ES
	MOV	[BX],DX
	SEG	ES
	MOV	[BX+2],DS
	RET

NEWBASE:
	MOV	ES,DX
	SEG	CS
	MOV	DS,[TEMP]
	XOR	SI,SI
	MOV	DI,SI
	MOV	CX,0080H
	REPE
	MOVSW
SETMEM:
	XOR	CX,CX
	MOV	DS,CX
	MOV	ES,DX
	MOV	SI,EXIT
	MOV	DI,SAVEXIT
	MOVSW
	MOVSW
	MOVSW
	MOVSW
	SEG	CS
	MOV	CX,[ENDMEM]
	SEG	ES
	MOV	[L0002],CX
	SUB	CX,DX
	CMP	CX,MAXDIF
	JBE	HAVDIF
	MOV	CX,MAXDIF
HAVDIF:	MOV	BX,ENTRYPOINTSEG
	SUB	BX,CX
	SHL	CX
	SHL	CX
	SHL	CX
	SHL	CX
	MOV	DS,DX
	MOV	[L0006],CX
	MOV	[L0008],BX
	MOV	[L0000],20CDH	;'INT INTTAB'
	MOV	B,[L0005],9AH	;long call opcode
	RET

RECTOBYT:		;orphaned in later version
	SHL	DI
	SHL	DI
	SHL	DI
	SHL	DI
	SHL	DI
	SHL	DI
	SHL	DI
	RET
;
;	data area
;
BADFAT	DB	CR,LF,'Bad FAT',CR,LF,'$'
ALLBAD	DB	CR,LF,'All FATs on disk are bad',CR,LF,'$'
RDERR	DB	CR,LF,'Disk read error',CR,LF,'$'
WRERR	DB	CR,LF,'Disk write error',CR,LF,'$'
CARPOS	DB	0
STARTPOS DB	0
PFLAG	DB	0
SRCHDON	DB	-1
;
;	beyond here is hexfile ds space even on original until E80h
;
PDIR	DS	2	
SRCHBP	DS	2
L0E09	DS	2
EXITHOLD
	DS	2	;double word for long jump
	DS	2	;segment
ENDMEM	DS	2
FATBASE	DS	2
INBUF	DS	255
DIRBUF	DS	128
NUMIO	DS	1
NAME1	DS	11
NAME2	DS	11
DMAADD	DS	4
TEMP	DS	2
DSKERR	DS	1
FCB	DS	2
RECPOS	DS	2
NEXTADD	DS	2
RECCNT	DS	2
CLUSNUM	DS	2
NUMTRNS	DS	2
	DS	100H	;## need more for IBM PC
	DS	32H	;stack space for INT 21H calls
;
;	SP points here during DISPATCH after SAVREGS has pushed all the regs listed below
;
AXSAVE	DS	2
BXSAVE	DS	2
CXSAVE	DS	2
DXSAVE	DS	2
SISAVE	DS	2
	DS	2	;DI save
BPSAVE	DS	2
DSSAVE	DS	2
	DS	2	;ES save
SSSAVE	DS	2
SPSAVE	DS	2
CURDRV	DS	2
DRVTAB:
;
END	
